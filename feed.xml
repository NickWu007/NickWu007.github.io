<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://nickwu007.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nickwu007.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-08-31T23:54:11+01:00</updated><id>https://nickwu007.github.io/</id><title type="html">DevPractical</title><subtitle>Practical tips for Developers, from a developer.</subtitle><author><name>Nick Wu</name></author><entry><title type="html">Compile Podcast Ep 3.5: Morning and night routines</title><link href="https://nickwu007.github.io/podcast/2018/08/31/podcast-ep-4/" rel="alternate" type="text/html" title="Compile Podcast Ep 3.5: Morning and night routines" /><published>2018-08-31T00:00:00+01:00</published><updated>2018-08-31T00:00:00+01:00</updated><id>https://nickwu007.github.io/podcast/2018/08/31/podcast-ep-4</id><content type="html" xml:base="https://nickwu007.github.io/podcast/2018/08/31/podcast-ep-4/">&lt;p&gt;Hello everyone! This is a brand new podcast for you!&lt;/p&gt;

&lt;p&gt;My Twitter: https://twitter.com/WujunaoNick&lt;/p&gt;

&lt;p&gt;In this shorter episode, I talk about my morning and night routines! Hopefully some of the tips will help you develop your own routines!&lt;/p&gt;

&lt;p&gt;Breakpoints(lol):&lt;/p&gt;

&lt;p&gt;00:00 Intro.
01:30 Why have morning and night routines?
03:23 My morning routines.
12:12 My night routines.
18:00 “Compile down to essentials”.&lt;/p&gt;

&lt;p&gt;————————————————————
Links in this episode:&lt;/p&gt;

&lt;p&gt;Why you should drink water first thing every day: https://eu.usatoday.com/story/news/nation-now/2017/03/14/why-you-should-drink-water-first-thing-every-day/99123938/&lt;/p&gt;

&lt;p&gt;Cardio with empty stomach: https://youtu.be/4Qz-1xD7BmM
————————————————————&lt;/p&gt;

&lt;p&gt;Next week we will have a new guest with a new topic! So subscribe and stay tuned!&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">In this shorter episode, I talk about my morning and night routines! Hopefully some of the tips will help you develop your own routines!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/compile_ep4_wide.png" /></entry><entry><title type="html">Compile Podcast Ep 3: First Dev Job: Tips and stories</title><link href="https://nickwu007.github.io/podcast/2018/08/25/podcast-ep-3/" rel="alternate" type="text/html" title="Compile Podcast Ep 3: First Dev Job: Tips and stories" /><published>2018-08-25T00:00:00+01:00</published><updated>2018-08-25T00:00:00+01:00</updated><id>https://nickwu007.github.io/podcast/2018/08/25/podcast-ep-3</id><content type="html" xml:base="https://nickwu007.github.io/podcast/2018/08/25/podcast-ep-3/">&lt;p&gt;Hello everyone! This is a brand new podcast for you!&lt;/p&gt;

&lt;p&gt;In this episode, we have a great school mate Alex joining us to talk about First Dev Job: how we got our first job, tips on job hunting, interviews, and more!&lt;/p&gt;

&lt;p&gt;Breakpoints(lol):&lt;/p&gt;

&lt;p&gt;00:00 Intro.
02:12 Speed Round with Alex.
19:04 Main topic: First Dev Job.
	19:26 Alex talks about his journey of getting his first job.
	26:55 Nick talks about how he got his first job.
	31:00 General tips on job hunting.
	38:44 CV tips.
	46:44Interview tips.
	01:08:19 “Compile down to essentials”.
1:11:58 Pick and Plug.&lt;/p&gt;

&lt;p&gt;————————————————————
Links in this episode:&lt;/p&gt;

&lt;p&gt;MIT open course on Algorithm and data structure: https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/&lt;/p&gt;

&lt;p&gt;LeetCode: https://leetcode.com&lt;/p&gt;

&lt;p&gt;Crack the Coding Interview book: http://amzn.eu/dlkHaB0&lt;/p&gt;

&lt;p&gt;CareerCup: https://careercup.com/&lt;/p&gt;

&lt;p&gt;Hiring without whiteboards: https://github.com/poteto/hiring-without-whiteboards&lt;/p&gt;

&lt;p&gt;Pink of the week: Coding Tech YouTube Channel: https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ
————————————————————&lt;/p&gt;

&lt;p&gt;Next week we will have a new guest with a new topic! So subscribe and stay tuned!&lt;/p&gt;

&lt;p&gt;My Twitter: https://twitter.com/WujunaoNick&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">In this episode, we have a great school mate Alex joining us to talk about First Dev Job: how we got our first job, tips on job hunting, interviews, and more!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/compile_ep3_wide.png" /></entry><entry><title type="html">Compile Podcast Ep 2: When to quit a project</title><link href="https://nickwu007.github.io/podcast/2018/08/14/podcast-ep-2/" rel="alternate" type="text/html" title="Compile Podcast Ep 2: When to quit a project" /><published>2018-08-14T00:00:00+01:00</published><updated>2018-08-14T00:00:00+01:00</updated><id>https://nickwu007.github.io/podcast/2018/08/14/podcast-ep-2</id><content type="html" xml:base="https://nickwu007.github.io/podcast/2018/08/14/podcast-ep-2/">&lt;p&gt;Hello everyone! This is a brand new podcast for you!&lt;/p&gt;

&lt;p&gt;In this episode, we have another great friend John joining us to talk about when you should quit a project: why you might want to consider quitting, how to deal with the guilt, what you can do to make the quitting easier, and more!&lt;/p&gt;

&lt;p&gt;Breakpoints(lol):&lt;/p&gt;

&lt;p&gt;00:00 Intro.
00:36 Introduce guest: John.
05:07 Speed Round with John.
16:10 Main topic: When to quit a project.
	17:21 John and Nick discuss a typical situation to quit a project.
	19:30 John explains “Sunk Cost Fallacy”, and how to weigh different options when you are at a crossroad with your project.
	24:50 Guilt of quitting a project.
	31:27 How to deal with the guilt?
	37:00 Quitting as part of time/energy management.
	42:25 “Compile down to essentials”.
45:28 Pick and Plug.&lt;/p&gt;

&lt;p&gt;Bare with me with the rubbish audio, not really good with editing yet. Also if you find the audio funny from time to time, that’s probably because we had a few disconnects during recording, and some of the bits are re-rendered in post.&lt;/p&gt;

&lt;p&gt;Next week we will have a new guest with a new topic! So subscribe and stay tuned!&lt;/p&gt;

&lt;p&gt;My Twitter: https://twitter.com/WujunaoNick&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">In this episode, we have another great friend John joining us to talk about when you should quit a project: why you might want to consider quitting, how to deal with the guilt, what you can do to make the quitting easier, and more!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/compile_ep2_wide.png" /></entry><entry><title type="html">Compile Podcast Ep 1: Side projects</title><link href="https://nickwu007.github.io/podcast/2018/08/09/podcast-ep-1/" rel="alternate" type="text/html" title="Compile Podcast Ep 1: Side projects" /><published>2018-08-09T00:00:00+01:00</published><updated>2018-08-09T00:00:00+01:00</updated><id>https://nickwu007.github.io/podcast/2018/08/09/podcast-ep-1</id><content type="html" xml:base="https://nickwu007.github.io/podcast/2018/08/09/podcast-ep-1/">&lt;p&gt;Hello everyone! This is a brand new podcast for you!&lt;/p&gt;

&lt;p&gt;In our premier episode, we have a great guest Brennan joining us to talk about side projects: why you might want to do a  side project, how to get started, and how to deal with getting stuck, and more!&lt;/p&gt;

&lt;p&gt;Brennan’s LinkedIn: https://www.linkedin.com/in/brennanproudfoot/.&lt;/p&gt;

&lt;p&gt;Breakpoints(lol):&lt;/p&gt;

&lt;p&gt;00:00 Intro.
00:43 Introduce guest: Brennan.
02:47 Speed Round with Brennan.
12:24 Main topic: side projects.
    12:48 Brennan and Nick talk about one of their own side projects.
    19:30 Why side projects are good for you?
    30:25 How to deal with loss of motivation, and getting un-stuck?
    39:25 How/where to get started?
    46:10 “Compile down to essentials”.
52:09 Pick and Plug.&lt;/p&gt;

&lt;p&gt;Bare with me with the rubbish audio, not really good with editing yet. Also terrible sense of humor of my side, sorry Brennan!&lt;/p&gt;

&lt;p&gt;Next week we will have a new guest with a new topic! So subscribe and stay tuned!&lt;/p&gt;

&lt;p&gt;My Twitter: https://twitter.com/WujunaoNick&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">In our premier episode, we have a great guest Brennan joining us to talk about side projects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/compile_ep_1.png" /></entry><entry><title type="html">Compile Podcast Ep 0: The Pilot</title><link href="https://nickwu007.github.io/podcast/2018/08/09/podcast-ep-0/" rel="alternate" type="text/html" title="Compile Podcast Ep 0: The Pilot" /><published>2018-08-09T00:00:00+01:00</published><updated>2018-08-09T00:00:00+01:00</updated><id>https://nickwu007.github.io/podcast/2018/08/09/podcast-ep-0</id><content type="html" xml:base="https://nickwu007.github.io/podcast/2018/08/09/podcast-ep-0/">&lt;p&gt;Hello everyone! This is a brand new podcast for you!&lt;/p&gt;

&lt;p&gt;In our pilot episode, I talk about the name of the podcast, a speed round of myself, and why I am starting this podcast! If there’s anything you want to say, be it suggestion on recording, any topic you want to hear us do, anything at all, feel free to leave a comment!&lt;/p&gt;

&lt;p&gt;Breakpoints(lol):&lt;/p&gt;

&lt;p&gt;00:00 Intro
00:28 Why “Compile”?
02:10 Speed Round
05:56 Why I started this podcast?&lt;/p&gt;

&lt;p&gt;Bare with me with the rubbish audio, not really good with editing yet.&lt;/p&gt;

&lt;p&gt;Next week we will have our first proper episode, with our first guest! So subscribe and stay tuned!&lt;/p&gt;

&lt;p&gt;My Twitter: https://twitter.com/WujunaoNick&lt;/p&gt;

&lt;p&gt;See you all next week!&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">In our pilot episode, I talk about who I am, and why I am starting this podcast.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/compile_ep_0.png" /></entry><entry><title type="html">What’s next?</title><link href="https://nickwu007.github.io/non_technical/life/2018/06/07/what-s-next/" rel="alternate" type="text/html" title="What's next?" /><published>2018-06-07T10:54:00+01:00</published><updated>2018-06-07T10:54:00+01:00</updated><id>https://nickwu007.github.io/non_technical/life/2018/06/07/what-s-next</id><content type="html" xml:base="https://nickwu007.github.io/non_technical/life/2018/06/07/what-s-next/">&lt;p&gt;I must preface this post with a sincere apology. I have been quite busy with my final year project and exams, which partially stopped my from updating the blog. The other reason is that I have felt a wane of motivation of writing, both from the extensive writing for dissertation, and the lack of material to lay out.&lt;/p&gt;

&lt;p&gt;Fortunately, both the project and the exams have concluded, so I have decided to return to writing just for fun. At the moment I am still indecisive on what technical topic to discuss, but hopefully it would be settled next week. For the moment, I think it best to write something about my life, the future of this blog, and some thoughts that I have recently.&lt;/p&gt;

&lt;h3 id=&quot;whats-next-for-me&quot;&gt;What’s next for me?&lt;/h3&gt;

&lt;p&gt;In the present, I am in quite an interesting spot: not quite a student anymore, but not a professional either. Before starting my new job in September, I have blocked out a summer for myself to relax, and get ready for the work.&lt;/p&gt;

&lt;p&gt;If you recall in my &lt;a href=&quot;/non_technical/2018/01/08/new-year-resolutions-2018/&quot;&gt;New Year Resolutions&lt;/a&gt;, I mentioned that 2018 is the year that I shall finally kick off my reading. So far I have read 2 fictions, and in the process of another non-technical book. If you have not read the Sherlock Holmes series, I strongly recommend giving it a shot. The writing is easy to follow, and the stories are a great escape from the dull daily routines.&lt;/p&gt;

&lt;p&gt;In summer I plan to further my goal, and finish the book I am reading right now, and possibly read one more. In the meantime, I have also a few technical side projects to play with, and you will see them in future posts.&lt;/p&gt;

&lt;h3 id=&quot;random-thoughts&quot;&gt;Random thoughts&lt;/h3&gt;

&lt;p&gt;During the verge of finishing another stage of life, I have had some interesting conversations with my contemporaries, about the future and each other’s plan. I want to devote a few words on the topic. the names of individual are removed for privacy naturally.&lt;/p&gt;

&lt;p&gt;It is extremely fortunate for me to have a job secured before my departure from uni, and the next 3 to 5 years quite planned out. However, I have witnessed so many good friends struggle to find a direction to proceed. Should we further our expertise in a grad school, make ourselves practically valuable in the industry, or seek other more fascinating opportunities in the world? The options are quite literally infinite.&lt;/p&gt;

&lt;p&gt;In my head, I have always had a ultimate life goal: be a problem solver. In earlier years I took pleasure in intellectually fighting with problems, be it one form or the other. As time passes, I have grown to realize that practical problems require more than genius to solve. I must adapt to solve them, which is what I then did.&lt;/p&gt;

&lt;p&gt;My point is rather than trying to find one’s purpose along the way, it is better to realise the purpose within oneself, and the way should present itself. Try asking yourself: what is my purpose? What gives me the most pleasure? What motivates me? Having these fundamental questions figured out may be a better way to deciding the next steps to take.&lt;/p&gt;

&lt;p&gt;Unfortunately, life is hard, more often than we like. You might find many obstacles, some of which are completely out of your hands. Work can sometimes be sufferingly hard, at times it seems like you are left out and alone, failures can come seemingly inevitably.&lt;/p&gt;

&lt;p&gt;I would be a liar if I claim that these have never happened to me, or that I don’t feel desperate, or even despair at times. There are many times that I want to give up too, and sometimes I do give up. I was fortunate enough to be able to make it through most of the times though, not only by my will, but also some help.&lt;/p&gt;

&lt;p&gt;Since I become quite independent, I have always had an “anchor” in my head, something that drives me to keep going. An encouraging snippet of words, a formidable rival, someone that I hold dear. The specific object has changed many times throughout the years, but the function keeps the same. They are a reminder to me, that I must not stop because of frustration, or stagnate because of boredom.&lt;/p&gt;

&lt;p&gt;Another thing that I have only found out recently is that I don’t have be alone through these hardships. In childhood, most of us were taught that seeking help can be a sign of weakness, and we grow up to hold out problems to ourselves in fear of judgement. In the last few years I have finally come to realise that everyone has their problem, and it is ok to tell someone that I am going through something hard, and I need someone to talk to.&lt;/p&gt;

&lt;p&gt;Most of the times the listeners are not able to give any practical help to the situation, but amazingly I have found that I can reach a solution much quicker, and less painful, with support from others. If you are experiencing hardship, I recommend to discuss it with someone you trust. It is certainly better than suffering in solitude.&lt;/p&gt;

&lt;h3 id=&quot;closing-words&quot;&gt;Closing words&lt;/h3&gt;

&lt;p&gt;I want to thank again, for your continuous support for the blog. I am the one writing, but the inspiration comes from those of you who took an interest in me and the blog.&lt;/p&gt;

&lt;p&gt;Have a nice week, and I shall see you soon.&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">I must preface this post with a sincere apology. I have been quite busy with my final year project and exams, which partially stopped my from updating the blog. The other reason is that I have felt a wane of motivation of writing, both from the extensive writing for dissertation, and the lack of material to lay out.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/horizon.jpg" /></entry><entry><title type="html">Teamoji wrap-up: connecting Firebase database</title><link href="https://nickwu007.github.io/dart/technical/2018/03/29/teamoji-wrap-up-connecting-firebase-database/" rel="alternate" type="text/html" title="Teamoji wrap-up: connecting Firebase database" /><published>2018-03-29T11:37:00+01:00</published><updated>2018-03-29T11:37:00+01:00</updated><id>https://nickwu007.github.io/dart/technical/2018/03/29/teamoji-wrap-up-connecting-firebase-database</id><content type="html" xml:base="https://nickwu007.github.io/dart/technical/2018/03/29/teamoji-wrap-up-connecting-firebase-database/">&lt;p&gt;Today we finish up with Teamoji! In the last post we got the authentication and session checking done. In this post we will start from &lt;a href=&quot;https://github.com/NickWu007/Teamoji-practice/tree/firebase_auth_done&quot;&gt;this branch&lt;/a&gt; on the Github repo. So without further ado, let’s jump in!&lt;/p&gt;

&lt;p&gt;Fair warning: this is a fairly long one. So get some coffee first!&lt;/p&gt;

&lt;h3 id=&quot;firebase-real-time-database&quot;&gt;Firebase real-time database&lt;/h3&gt;
&lt;p&gt;Firebase offers a &lt;a href=&quot;https://firebase.google.com/docs/database/&quot;&gt;real-time NoSQL database&lt;/a&gt;. If you have only worked with relational database, like me, NoSQL takes sometime to get used to. But here I will attempt to give you a high level overview of NoSQL, and Firebase database, since it is slightly different from traditional NoSQL database.&lt;/p&gt;

&lt;p&gt;Contrary to relational database, where data is stored in tables with rows and columns, NoSQL database stores data as “a collection of documents”. In other words, you can think of your entire database as a huge JSON tree, or a dictionary. Each node is a &lt;code class=&quot;highlighter-rouge&quot;&gt;key, value&lt;/code&gt; pair, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; can be another dictionary.&lt;/p&gt;

&lt;p&gt;In Firebase, you can retrieve a particular piece of data by “referencing” it. This sure sounds simple enough, but since Firebase is real-time, you cannot directly read data off from reference. Instead, you register callbacks to specific events, which gives you a &lt;code class=&quot;highlighter-rouge&quot;&gt;DatabaseSnapshot&lt;/code&gt; object, from which you can then read the data.&lt;/p&gt;

&lt;p&gt;Let’s look at an example.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starCountRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/starCount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;starCountRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateStarCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here a &lt;code class=&quot;highlighter-rouge&quot;&gt;starCountRef&lt;/code&gt; is created. However, the reference itself doesn’t do anything in particular. To read the data, you must register a callback on the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; event, which passes a &lt;code class=&quot;highlighter-rouge&quot;&gt;snapshot&lt;/code&gt; which the data contained.&lt;/p&gt;

&lt;p&gt;There are also other events you can register callbacks to. In Teamoji you will see them getting used as well. Now let’s jump in with Teamoji!&lt;/p&gt;

&lt;h3 id=&quot;structure-of-data&quot;&gt;Structure of data&lt;/h3&gt;
&lt;p&gt;Before we write any code, the structure of the database needs to be nailed down first. First of all, there are three major data models in Teamoji:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User&lt;/li&gt;
  &lt;li&gt;Team&lt;/li&gt;
  &lt;li&gt;Message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously we can each of them in a separate reference, and add more references to link them. That would be the relation way. We need another representation of the data.&lt;/p&gt;

&lt;p&gt;First of all, Firebase authentication module takes care of the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object, and exposes a unique &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt; for each user. Since we don’t plan to support user-to-user functionalities in Teamoji, a &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt; is essentially all we need. Overall, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; needn’t to be in the database.&lt;/p&gt;

&lt;p&gt;Each user will have a few teams they are affiliated with. In Teamoji we use a &lt;code class=&quot;highlighter-rouge&quot;&gt;user_teams&lt;/code&gt; reference to represent this. The key would be the &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt; mentioned before, and the value would the a list of team names that user is in.&lt;/p&gt;

&lt;p&gt;Now the messages. Conceptually each message should be linked with a team. We use the same approach we did with user and teams, and use a &lt;code class=&quot;highlighter-rouge&quot;&gt;messages&lt;/code&gt; reference to represent all the messages. Within it, each key is the name of the team, and the value is a list of the messages in that team.&lt;/p&gt;

&lt;p&gt;It is very important to settle down on a structure of the database, since our code is going to be based on it. What I used in Teamoji is quite crude and might not be optimal. If you have any suggestion, feel free to bring it up in the comment section.&lt;/p&gt;

&lt;h3 id=&quot;linking-with-firebase-db&quot;&gt;Linking with Firebase DB&lt;/h3&gt;
&lt;p&gt;First let’s tackle the teams. When the user logs in, they teams would be built into a list, and we also need something to represent the currently displaying team. Right now all of this is mocked in &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage.dart&lt;/code&gt;, but ideally they should be in the service module, since the component itself should only display content and forward the user interactions. So first thing we should do is to take out all the teams-related variables, and delegate the functionality to the service.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// firebase_service.dart&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousEmojiMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousEmojis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_fbGoogleAuthProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fbDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildTeams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fbDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'users_teams/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;teams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTeams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawTeams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rawTeams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;changeTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;switchTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// return if there is already a lister.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previousEmojiMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;previousEmojiMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Register listener&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fbDatabase&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'messages/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onChildAdded&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_buildPrevEmoji&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;_buildPrevEmoji&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;previousEmojiMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawMessages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postNewMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbDatabase&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'messages/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbDatabase&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'users_teams/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First of all, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Database&lt;/code&gt; object is created during initialization. Then the relevant variables are added. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;previousEmojiMap&lt;/code&gt; is especially important, and I will explain this later.&lt;/p&gt;

&lt;p&gt;First let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;buildTeams()&lt;/code&gt;. As mentioned before, we reference &lt;code class=&quot;highlighter-rouge&quot;&gt;users_teams/$uid&lt;/code&gt; in the database, and register a callback on value. In it the value of the snapshot is iterated, and each team name is added into the list. Finally, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;changeTeam(teams[0])&lt;/code&gt; to point the current team to the first one of the list.&lt;/p&gt;

&lt;p&gt;Following up let’s look at &lt;code class=&quot;highlighter-rouge&quot;&gt;changeTeam()&lt;/code&gt;. This function is fairly simple, in that it just updates &lt;code class=&quot;highlighter-rouge&quot;&gt;currentTeam&lt;/code&gt; if necessary and calls the  &lt;code class=&quot;highlighter-rouge&quot;&gt;switchTeam&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;switchTeam&lt;/code&gt; is where I got things wrong the first time. Here it checks if a callback that builds the messages has been registered for this team. If so, nothing should be done. Otherwise a new callback would be registered.&lt;/p&gt;

&lt;p&gt;This is necessary, since Teamoji is a Single Page Application. If this check is not done, multiple callbacks would be called when a new child is added into the messages list, and therefore showing multiple times in the list.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code class=&quot;highlighter-rouge&quot;&gt;createTeam()&lt;/code&gt; function is fairly straightforward as well. It simply pushes a new entry in the &lt;code class=&quot;highlighter-rouge&quot;&gt;users_teams/$uid&lt;/code&gt; list.&lt;/p&gt;

&lt;h3 id=&quot;default-group&quot;&gt;Default group&lt;/h3&gt;
&lt;p&gt;There are one more thing to take care of. When the user first logs in, they would not have any teams yet. If we use the current structure, the first thing the user sees will be a blank screen, which is quite confusing and bad UX. I added an extra check upon login that if this is a new user, assign them to the “general” group. This way users would be able to see at least some content when they first log in.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//firebase_service.dar

Future signIn() async {
     try {
       await fbAuth.signInWithPopup(_fbGoogleAuthProvider);
&lt;span class=&quot;gi&quot;&gt;+      if (fbAuth.currentUser != null) {
+        fbDatabase
+            .ref('users_teams/' + fbAuth.currentUser.uid)
+            .once('value')
+            .then((event) async {
+          if (event.snapshot.val() == null) {
+            await fbDatabase
+                .ref('users_teams/' + fbAuth.currentUser.uid)
+                .push('general').future;
+          }
+          ;
+        });
+      }
&lt;/span&gt;     } catch (error) {
       print(&quot;$runtimeType::login() -- $error&quot;);
     }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wiring-up&quot;&gt;Wiring up&lt;/h3&gt;
&lt;p&gt;Now that services functionalities are ready, we can simply wiring it up to our components.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// changes of homepage.dart


&lt;span class=&quot;gu&quot;&gt;@@ -34,43 +34,28 @@ import 'package:angular_components/angular_components.dart';
&lt;/span&gt;       'homepage.css',
     ])
 class HomepageComponent extends HomepageMessages implements OnInit {
   bool visible = false;
   String currentComponent = 'homepage';
 
&lt;span class=&quot;gd&quot;&gt;-  List&amp;lt;Message&amp;gt; previousEmojis = [
-    new Message('Nick', 'images/profile_placeholder.png', '\u{1F60B}',
-        new DateTime.now()),
-    new Message('Nick', 'images/profile_placeholder.png', '\u{1F60B}',
-        new DateTime.now()),
-    new Message('Nick', 'images/profile_placeholder.png', '\u{1F60B}',
-        new DateTime.now()),
-    new Message('Nick', 'images/profile_placeholder.png', '\u{1F60B}',
-        new DateTime.now()),
-    new Message('Nick', 'images/profile_placeholder.png', '\u{1F60B}',
-        new DateTime.now()),
-  ];
-
-  List&amp;lt;String&amp;gt; teams = ['google', 'angular', 'firebase'];
-
&lt;/span&gt;   final StreamController&amp;lt;String&amp;gt; stream = new StreamController.broadcast();

   @Output()
   Stream get onPageChange =&amp;gt; stream.stream;
 
&lt;span class=&quot;gd&quot;&gt;-  bool shouldShowAsDeepBlue(String team) =&amp;gt; false;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  bool shouldShowAsDeepBlue(String team) =&amp;gt; team == service.currentTeam;
&lt;/span&gt; 
   Future onSelectEmoji(Message message) async {
     currentComponent = 'homepage';
&lt;span class=&quot;gd&quot;&gt;-    // TODO: use firebase database to push new message.
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    await service.postNewMessage(message);
&lt;/span&gt;   }
 
   Future onCreateTeam(String teamName) async {
     currentComponent = 'homepage';
     if (teamName == null) return;
&lt;span class=&quot;gd&quot;&gt;-    // TODO: use firebase database to create new page.
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    await service.createTeam(teamName);
&lt;/span&gt;   }
 
   Future onSignOut() async {
&lt;span class=&quot;gu&quot;&gt;@@ -80,6 +65,6 @@ class HomepageComponent extends HomepageMessages implements OnInit {
&lt;/span&gt; 
   @override
   ngOnInit() {
&lt;span class=&quot;gd&quot;&gt;-    // TODO: use firebase database to build the teams.
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    service.buildTeams();
&lt;/span&gt;   }
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also remember to update the template of homepage.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// changes of homepage.html


&lt;span class=&quot;gu&quot;&gt;@@ -5,10 +5,10 @@
&lt;/span&gt;             
         &amp;lt;/div&amp;gt;
         &amp;lt;material-list class=&quot;tm-home-drawer-list&quot;&amp;gt;
&lt;span class=&quot;gd&quot;&gt;-            &amp;lt;material-list-item *ngFor=&quot;let team of teams&quot;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            &amp;lt;material-list-item *ngFor=&quot;let team of service.teams&quot;
&lt;/span&gt;                                 class=&quot;tm-team-list-item&quot;
                                 [class.deep-blue]=&quot;shouldShowAsDeepBlue(team)&quot;
&lt;span class=&quot;gd&quot;&gt;-                                (trigger)=&quot;drawer.toggle();&quot;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                                (trigger)=&quot;drawer.toggle(); service.changeTeam(team);&quot;&amp;gt;
&lt;/span&gt;                 
             &amp;lt;/material-list-item&amp;gt;
         &amp;lt;/material-list&amp;gt;
&lt;span class=&quot;gu&quot;&gt;@@ -28,11 +28,11 @@
&lt;/span&gt;             &amp;lt;material-button class=&quot;material-drawer-button&quot; icon (trigger)=&quot;drawer.toggle()&quot;&amp;gt;
                 &amp;lt;material-icon icon=&quot;menu&quot;&amp;gt;&amp;lt;/material-icon&amp;gt;
             &amp;lt;/material-button&amp;gt;
&lt;span class=&quot;gd&quot;&gt;-            &amp;lt;div class=&quot;tm-main-content-header-title&quot;&amp;gt;header&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+            &amp;lt;div class=&quot;tm-main-content-header-title&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;         &amp;lt;/div&amp;gt;
         &amp;lt;div class=&quot;tm-main-content-content&quot;&amp;gt;
             &amp;lt;ul style=&quot;padding-left: 0; display: grid; grid-template-columns: 1fr 1fr;&quot;&amp;gt;
&lt;span class=&quot;gd&quot;&gt;-                &amp;lt;li *ngFor=&quot;let message of previousEmojis&quot; class=&quot;tm-prev-emoji-item&quot;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                &amp;lt;li *ngFor=&quot;let message of service.previousEmojis&quot; class=&quot;tm-prev-emoji-item&quot;&amp;gt;
&lt;/span&gt;                     &amp;lt;user-post [message]=&quot;message&quot;&amp;gt;&amp;lt;/user-post&amp;gt;
                 &amp;lt;/li&amp;gt;
             &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we need to create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt; object when the user selects an emoji from the selector. This should be done in &lt;code class=&quot;highlighter-rouge&quot;&gt;EmojiSelector&lt;/code&gt; component.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class EmojiSelectorComponent extends EmojiSelectorMessages with EmojiList {
   @Output()
   Stream get onSelect =&amp;gt; _selectStream.stream;
 
&lt;span class=&quot;gi&quot;&gt;+  FirebaseService service;
+
+  EmojiSelectorComponent(this.service);
+
&lt;/span&gt;   void onCancel() =&amp;gt; _selectStream.add(null);
 
&lt;span class=&quot;gd&quot;&gt;-  void onSelectEmoji(String emoji) {
-    // TODO: add new message to the stream.
-    _selectStream.add(null);
-  }
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  void onSelectEmoji(String emoji) =&amp;gt; _selectStream.add(new Message(
+      service.fbAuth.currentUser.displayName,
+      service.fbAuth.currentUser.photoURL,
+      emoji,
+      new DateTime.now()));
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, our Teamoji app should be completed.&lt;/p&gt;

&lt;h3 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h3&gt;
&lt;p&gt;You can find the complete code of Teamoji in the master branch of the &lt;a href=&quot;https://github.com/NickWu007/Teamoji-practice&quot;&gt;Github repo&lt;/a&gt;. I have omitted some steps in the styling and the steps to push it with Firebase hosting. If that’s something you want to know, let me know in the comments and I can do a follow-up in the future.&lt;/p&gt;

&lt;p&gt;Also, I will do a separate post as a reflection of Teamoji, from the conception of the idea, and design and engineering decisions, and the process of building it. Stay tuned for that.&lt;/p&gt;

&lt;p&gt;I hope this series serves as a good intro if you are new to AngularDart and Firebase. In the next few months I will try to make this web app into a mobile app, with &lt;a href=&quot;flutter.io&quot;&gt;Flutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you had fun reading this series. I will see you soon.&lt;/p&gt;

&lt;p&gt;Nick&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">Today we finish up with Teamoji! In the last post we got the authentication and session checking done. In this post we will start from this branch on the Github repo. So without further ado, let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/dart_angular.png" /></entry><entry><title type="html">Teamoji #9 Entering Firebase</title><link href="https://nickwu007.github.io/dart/technical/2018/03/19/teamoji-9-entering-firebase/" rel="alternate" type="text/html" title="Teamoji #9 Entering Firebase" /><published>2018-03-19T22:21:00+00:00</published><updated>2018-03-19T22:21:00+00:00</updated><id>https://nickwu007.github.io/dart/technical/2018/03/19/teamoji-9-entering-firebase</id><content type="html" xml:base="https://nickwu007.github.io/dart/technical/2018/03/19/teamoji-9-entering-firebase/">&lt;p&gt;Today we keep going with Teamoji. In this post we are starting to use &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; for the authentication and database.&lt;/p&gt;

&lt;h3 id=&quot;hold-on-a-sec&quot;&gt;Hold on a sec!&lt;/h3&gt;
&lt;p&gt;Before I go into detail about integrating Firebase into Teamoji, for those of you who have been following this series since the beginning, I have made some drastic changes to the front end. Now there’s no routing in the app, on other words Teamoji is not a SPA(Single Page Application). This choice is made because I felt that using a SPA structure is easier for understanding the codebase. We will start with this SPA with no Firebase. You can find the starting code &lt;a href=&quot;https://github.com/NickWu007/Teamoji-practice/tree/firebase_start&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;firebase-overview&quot;&gt;Firebase Overview&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.gstatic.com/mobilesdk/160503_mobilesdk/logo/2x/firebase_96dp.png&quot; alt=&quot;firebase_logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Firebase is Google’s BaaS(Backend as a Service), now with many development and growth tools readily available for developers. The main features of Firebase include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authentication&lt;/li&gt;
  &lt;li&gt;Real-time database&lt;/li&gt;
  &lt;li&gt;Cloud storage&lt;/li&gt;
  &lt;li&gt;Cloud functions&lt;/li&gt;
  &lt;li&gt;Analytics&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the current version of Teamoji, we will only use the authentication and database module. In the future all other main features mentioned can be integrated in as well.&lt;/p&gt;

&lt;p&gt;In this post we will implement the authentication of Firebase, and in the next post the database will be added.&lt;/p&gt;

&lt;h3 id=&quot;firebase-setup&quot;&gt;Firebase setup&lt;/h3&gt;
&lt;p&gt;First of all, you must create a Firebase “project”, which holds all the configurations and the data of your application. Go to Firebase &lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;console&lt;/a&gt; and create a project following the instructions.&lt;/p&gt;

&lt;p&gt;Once you have done that, the firebase module and firebase library should be added into the Angular Dart project. This is already done for you in the starter code.&lt;/p&gt;

&lt;p&gt;One last configuration needed is in the “Authentication” tab once you have created the project. Under “Sign-in Method”, you must enable Google sign in, for it to be used in Teamoji.&lt;/p&gt;

&lt;h3 id=&quot;firebase-service&quot;&gt;Firebase Service&lt;/h3&gt;
&lt;p&gt;Before we start building the frontend interactions, a &lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseService&lt;/code&gt; should be added. It would be possible, of course, to use Firebase libraries directly in each component, but it would obviously be better to extract them into a custom service. Also, remember that ultimately we want to use Firebase with Flutter as well, and a ready-to-use service would be very handy.&lt;/p&gt;

&lt;p&gt;On the “project overview” page of the Firebase console, a code snippet of how to initialize the firebase app can be found. We will use this in our setup.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// firebase_service.dart&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dart:async'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'package:angular/core.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'package:firebase/firebase.dart'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'secret.dart'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Injectable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the code snippet is in &lt;code class=&quot;highlighter-rouge&quot;&gt;secret.init()&lt;/code&gt;, which is not tracked on github to protect the API key. Simply add your own init code snippet in and it would be fine.&lt;/p&gt;

&lt;p&gt;Now that we have this service, it should be added into the provider list for the application, so that DI knows to inject it into components.
 d&lt;/p&gt;
&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// main.dart&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sign-in-and-sign-out&quot;&gt;Sign in and sign out&lt;/h3&gt;
&lt;p&gt;First let’s work out the easy bits. Firebase has excellent &lt;a href=&quot;https://firebase.google.com/docs/auth/web/google-signin&quot;&gt;docs&lt;/a&gt; on how to implement authentication and other modules. I will only go over the gist.&lt;/p&gt;

&lt;p&gt;Essentially, because Firebase offers so many authentication methods, when one wants to use the sign in method, one must specify which “provider” it is. As mentioned before, we will use Google sign in. The provider can be generated when the service is constructed, since we will most definitely need it. We would also need the &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt; object from Firebase, which has the sign in and sign out method.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// firebase_service.dart&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Injectable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Auth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GoogleAuthProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_fbGoogleAuthProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_fbGoogleAuthProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After setting this up, the &lt;code class=&quot;highlighter-rouge&quot;&gt;signIn()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;signOut()&lt;/code&gt; methods can be implemented by following the docs:&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// firebase_service.dart&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signInWithPopup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_fbGoogleAuthProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$runtimeType&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;::login() -- &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;signOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s wire it up to the application, and test if it works.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// welcome_page.dart&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomePageComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WelcomePageMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;WelcomePageComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onPageChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'homepage'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First inject the service in the constructor. When the button is pressed, &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; on the service to sign in. After that, simply double check if there’s a current user. If so, change the showing page to the homepage.&lt;/p&gt;

&lt;p&gt;Conversely, in the homepage &lt;code class=&quot;highlighter-rouge&quot;&gt;signOut&lt;/code&gt; method, the implementation is similar.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// homepage.dart&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomepageComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomepageMessages&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;HomepageComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSignOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'welcome'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After implementing this, the sign in/ sign out flow should be complete.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/signin-out-demo.gif&quot; alt=&quot;sign-in-out-demo&quot; /&gt;
&lt;em&gt;Works! Woohoo!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;persist-authentication-status&quot;&gt;Persist authentication status&lt;/h3&gt;
&lt;p&gt;Now that we have the sign in and sign out flow, it is worth reminding ourselves that users wouldn’t want to sign in every time they refresh the page, or if they just signed in an hour ago. We would want some mechanisms that preserves the user sign in status.&lt;/p&gt;

&lt;p&gt;Fortunately, firebase offers an event when a user’s authentication state changes. We can register a callback to this event stream, and check if there’s a new user after the state change.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// app_component.dart&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'welcome'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;FirebaseService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onPageChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fbAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onAuthStateChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'homepage'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this extra logic added, the landing flow becomes something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/login-persist.gif&quot; alt=&quot;login-persist-demo&quot; /&gt;
&lt;em&gt;No need to sign in upon refresh!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You will see that upon refresh, the authentication has not quite been updated yet, so the welcome page is shown. However, it is soon updated to reflect the user is actually signed in. Therefore the app loads the homepage. In addition, after signing out, a refresh would no longer redirect the user to homepage, which is exactly what we wanted.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;You can find the completed code up to this point &lt;a href=&quot;https://github.com/NickWu007/Teamoji-practice/tree/firebase_auth_done&quot;&gt;here&lt;/a&gt;. Firebase has proven to be extremely easy to get started and use. It should be able to do more than needed for Teamoji. In the next post we will explore the Firebase real-time database, and finish the Teamoji project. As usual, if you run into anything weird, let me know in the comments below, or hit me up on twitter.&lt;/p&gt;

&lt;p&gt;Happy coding!
Nick&lt;/p&gt;</content><author><name>Nick Wu</name></author><summary type="html">Today we keep going with Teamoji. In this post we are starting to use Firebase for the authentication and database.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/dart_angular.png" /></entry><entry><title type="html">Dart #8: homepage part 2</title><link href="https://nickwu007.github.io/dart/technical/2018/01/08/dart-8-homepage-part-2/" rel="alternate" type="text/html" title="Dart #8: homepage part 2" /><published>2018-01-08T03:32:35+00:00</published><updated>2018-01-08T03:32:35+00:00</updated><id>https://nickwu007.github.io/dart/technical/2018/01/08/dart-8-homepage-part-2</id><content type="html" xml:base="https://nickwu007.github.io/dart/technical/2018/01/08/dart-8-homepage-part-2/">&lt;p&gt;Today we continue with the homepage for Teamoji. In the last tutorial we finished the main content of Homepage. But we are still missing the hidden menu part on the left. This introduces a new concept of Angular Dart: deferred content. So without further ado, let’s jump in!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nickwuedinburgh.files.wordpress.com/2018/01/homepage_drawer.png&quot; alt=&quot;Homepage_drawer.png&quot; /&gt;
&lt;em&gt;Mock&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;whats-deferred-content&quot;&gt;What’s Deferred Content?&lt;/h3&gt;

&lt;p&gt;Before we dive in code it is important to understand the modal component and deferred content. Deferred content roots from the &lt;em&gt;Lazy Evaluation Principle&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;“Lazy Evaluation, or call-by-need is an evaluation strategy which delays the evaluation of an expression until its value is needed.”&lt;/p&gt;

&lt;p&gt;You might think: how is lazy a good thing? Consider the following scenario: the user logs into the homepage, which displays the recent chat history of a particular team. The user is very active in this team, and rarely switches to other teams.&lt;/p&gt;

&lt;p&gt;Without lazy evaluation, we will compile and load all components when user accesses the page. However the user never expands the left menu, making the load time for that component virtually useless. On the other hand, with lazy evaluation, we choose not to compile and load the hidden components, and only load them when user is asking for them. This way we speed up the initial page load, which is crucial to acquisition and retention.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nickwuedinburgh.files.wordpress.com/2018/01/lazyness.png&quot; alt=&quot;lazyness&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-menu-component&quot;&gt;The menu component&lt;/h3&gt;

&lt;p&gt;We can see the bits of the menu component quite clearly from the mock:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A header that says “Your teams”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A list of the teams the user belongs to, highlight the one currently on display. (&lt;em&gt;ngFor&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A button to create new Team. (&lt;em&gt;Material-button&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A sign out button. (&lt;em&gt;Material-button&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point you should be fairly comfortable with all these techniques. The only thing to watch for in the &lt;a href=&quot;https://dart-lang.github.io/angular_components_example/#AppLayout&quot;&gt;Application Layout&lt;/a&gt; format.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;material-drawer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;temporary&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;drawer&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;overlay&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tm-home-drawer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tm-home-drawer-header-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;material-list&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tm-home-drawer-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;material-list-item&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ngFor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;let team of teams&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tm-team-list-item&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deep-blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shouldShowAsDeepBlue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onChangeTeam&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/material-list-item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/material-list&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tm-home-drawer-btns&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;






&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/material-drawer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are a few points to note. First notice we name the &lt;code class=&quot;highlighter-rouge&quot;&gt;material-drawer&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;drawer&lt;/code&gt;. This is so that we can toggle it by clicking on the menu button on the homepage:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;material-button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;material-drawer-button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;material-icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/material-icon&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/material-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;*deferredContent&lt;/code&gt; marker in the fist &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; has the same meaning as in &lt;code class=&quot;highlighter-rouge&quot;&gt;*ngFor&lt;/code&gt;: this is a structural directive, which alters the DOM tree. Adding this marker tells the dart engine: don’t load me unless needed. The rest is fairly standard stuff.&lt;/p&gt;

&lt;p&gt;After adding this into the homepage, we can see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nickwuedinburgh.files.wordpress.com/2018/01/screen-shot-2018-01-07-at-22-29-41.png&quot; alt=&quot;Screen Shot 2018-01-07 at 22.29.41&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;At this point we have technically finished all mocks given in the first place. But as you can probably see, this app is still broken. There are some functionalities missing, such as a button to join a team. Also there’s no navigation between the pages. In the next post we will address these problems, and get started with firebase!&lt;/p&gt;

&lt;p&gt;As usual if you get stuck somewhere, always feel free to checkout the &lt;a href=&quot;https://github.com/NickWu007/Teamoji-practice&quot;&gt;repo&lt;/a&gt;, or PM me the specific issue. Happy coding!&lt;/p&gt;</content><author><name>nickwu0715</name></author><summary type="html">Today we continue with the homepage for Teamoji. In the last tutorial we finished the main content of Homepage. But we are still missing the hidden menu part on the left. This introduces a new concept of Angular Dart: deferred content. So without further ado, let’s jump in!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nickwu007.github.io/assets/images/dart_angular.png" /></entry><entry><title type="html">New Year Resolutions: 2018</title><link href="https://nickwu007.github.io/non_technical/2018/01/08/new-year-resolutions-2018/" rel="alternate" type="text/html" title="New Year Resolutions: 2018" /><published>2018-01-08T01:38:00+00:00</published><updated>2018-01-08T01:38:00+00:00</updated><id>https://nickwu007.github.io/non_technical/2018/01/08/new-year-resolutions-2018</id><content type="html" xml:base="https://nickwu007.github.io/non_technical/2018/01/08/new-year-resolutions-2018/">&lt;p&gt;New year resolution has sort of become a joke in recent years, referencing plans people set at the start of the year and unavoidably fall short at the end of year. Though probably true, I still maintain that setting goals is helpful, in that they orient one’s focus and efforts. Personally I have been doing this privately for the past few years, and I am quite happy that every year I have managed to achieve most of them. This year in the spirit of getting more visibility and accountability I plan to write out some of the goals I set for the year, which I shall review at the end of 2018.&lt;/p&gt;

&lt;p&gt;Most of the goals in this post are somewhat related to software development, for privacy concerns. ;)&lt;/p&gt;

&lt;h3 id=&quot;technical&quot;&gt;Technical&lt;/h3&gt;

&lt;h4 id=&quot;real-life-project&quot;&gt;Real life project&lt;/h4&gt;

&lt;p&gt;If you have been here for a while, you will know I have started an &lt;a href=&quot;https://nickwuedinburgh.wordpress.com/category/dartlang/&quot;&gt;AngularDart series&lt;/a&gt;, in which we build a web chat app called Teamoji. Currently the app is only about 50% done, and the first goal of the year is to finish the project and blog series, also launch it online.&lt;/p&gt;

&lt;p&gt;Personally I have virtually no experience in devops. (The last time I deploy code is through a FTP server) So this would be an interesting experience to go through. I will certainly blog about this as we progress. I have set up a list of TODOs for this project and we will follow it.&lt;/p&gt;

&lt;h4 id=&quot;taking-it-further&quot;&gt;Taking it further&lt;/h4&gt;

&lt;p&gt;Once the web app is online, I would like to do a follow-on project to make a mobile app for it as well. For a very time I have been interested in &lt;a href=&quot;https://flutter.io/&quot;&gt;Flutter&lt;/a&gt; and this would a perfect sized app to adopt. I will devote a separate post to this once we finish the web app.&lt;/p&gt;

&lt;h4 id=&quot;going-deeper-into-backend&quot;&gt;Going deeper into Backend&lt;/h4&gt;

&lt;p&gt;After half of a dozen front end heavy projects, I suddenly realized how unfamiliar I am with backend. Over the past year when I was using Node for my uni honors project, I found myself very confused at times and had to rely quite heavily on online help. This year I plan to vastly expand my backend knowledge, through a series of side projects, focused on API building. Since this part is mostly personal learning, through a lot of existing materials, I would not be publishing relevant posts.&lt;/p&gt;

&lt;h4 id=&quot;distributed-systems&quot;&gt;Distributed Systems&lt;/h4&gt;

&lt;p&gt;Over the last year we saw a burst in cryptocurrency, most famously Bitcoin. Personally I have been very interested in Distributed Systems, ever since I took a relevant class at UNC.&lt;/p&gt;

&lt;p&gt;This year I would like to allocate time for 2 full system building projects, one centralized and one decentralized. The specific projects are TBD, and as usual I will write up individual posts when I start the project.&lt;/p&gt;

&lt;h3 id=&quot;non-technical&quot;&gt;Non-Technical&lt;/h3&gt;

&lt;h4 id=&quot;reading&quot;&gt;Reading&lt;/h4&gt;

&lt;p&gt;Over the past year I have only read 5 books from start to finish, partly because of laziness, and ignorance of the value of reading. In 2018, I plan to read 10 fictions. (Yes you heard that right) When I look at my bookshelf, it is very clear most of the books I have read are technical, or relevant to the tech business. In the interest of balance, I figure it is time to pay more attention into fictions. If you have a suggestion, please let me know. There are still quite a few empty slots.&lt;/p&gt;

&lt;p&gt;This doesn’t mean I will stop reading technical books though. To finish the projects above, there’s a quite a list of books and online materials I should go through.&lt;/p&gt;

&lt;h4 id=&quot;giving-back-to-the-community&quot;&gt;Giving back to the community&lt;/h4&gt;

&lt;p&gt;I have never considered myself a genius developer. Along the way I have worked very hard, but equally important, I have received countless help from my peers, mentors, and just friends. The point of this blog is to give back some of my knowledge to people just starting out their developer journey, and help someone to get through what I have been through. In 2018, I want to help more people, beyond the medium of text.&lt;/p&gt;

&lt;p&gt;I am planning to set up a podcast for myself, to talk about my experience as a developer, and have guests to discuss various topics of software development. As you can probably guess, I have no experience in running a podcast. But over the past year I have listened to many great podcasts and I believe it is a viable medium to share knowledge and experience. If you have topics that you have to hear me talk about, please let me know, either through comments below or private messaging. As guests go, I would have mostly my friends and other developers I know, and we will see how that goes!&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h3&gt;

&lt;p&gt;These are my goals in 2018. They seem like a lot for sure, and frankly I am slight terrified at this point when I scroll back and read them again. However, I have confidence to knock them down, or try my best to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nickwuedinburgh.files.wordpress.com/2018/01/screen-shot-2018-01-07-at-20-35-00.png&quot; alt=&quot;Screen Shot 2018-01-07 at 20.35.00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have a moment to think about what you want to achieve in the new year, and set up a list to track them too. It doesn’t really matter if you complete them or not; what matters is have you really tried.&lt;/p&gt;

&lt;p&gt;Happy New Year!&lt;/p&gt;</content><author><name>nickwu0715</name></author><summary type="html">New year resolution has sort of become a joke in recent years, referencing plans people set at the start of the year and unavoidably fall short at the end of year. Though probably true, I still maintain that setting goals is helpful, in that they orient one’s focus and efforts. Personally I have been doing this privately for the past few years, and I am quite happy that every year I have managed to achieve most of them. This year in the spirit of getting more visibility and accountability I plan to write out some of the goals I set for the year, which I shall review at the end of 2018.</summary></entry></feed>